interval(c(1,2), c(3, 4))
?groupGeneric
ll interval(c(1,2), c(3, 4))
ll <- interval(c(1,2), c(3, 4))
c(2, 3)
c(2, 3) %within% ll
c(2, 3) %within% ll
class(c(2,3))
class(ll)
class(ll)
c(2, 3) %within% ll
c(2, 3) %within% ll
c(2, 3) %within% ll
c(2, 3) %within% c(3, 4)
Inf
class(Inf)
interval(c(1,2), c(3, 4))
interval(c(1,2), c(3, 4))
interval(c(1,2), c(3, 4))
belongs
ll <- interval(c(1,2), c(3, 4))
v <- c(2, 3)
belongs(v, ll)
belongs(v, ll)
belongs(v, ll)
belongs(v, ll)
belongs(v, ll)
belongs(v, ll, TRUE)
belongs(v, ll, TRUE)
belongs(v, ll, FALSE)
ll <- interval(c(1,2), Inf)
belongs(v, ll, FALSE)
ll
debug(belongs)
belongs(v, ll, FALSE)
belongs
showMethods("belongs")
ll <- interval(c(1,2), Inf)
ll
ll <- interval()
ll <- interval(Inf)
new("interval")
new("interval")
ll <- interval(Inf)
ll <- interval(Inf)
ll <- interval(Inf)
ll <- interval(Inf)
ll <- interval()
ll <- interval()
new"interval
new"interval
new"interval
new("Interval")
interval()
interval()
interval(1, 2)
interval(c(1, 3), Inf)
interval(c(1, 3), Inf)
rm(check_interval)
interval(c(1, 3), Inf)
belongs(3, 3)
!
q()
Q
belongs(3, 3)
interval(c(1, 3), Inf)
interval()
interval()@type
intersect(c("open", "closed"), interval()@type)
setdiff(c("open", "closed"), interval()@type)
setdiff(interval()@type, c("open", "closed"))
setdiff(c("ds"), c("open", "closed"))
interval()
interval()
interval()
interval()
interval()
Inf
interval(1, 2)
interval(1, 2, c("closed", "open"))
identical(c("lose","s"), "a")
identical(c("lose","s"), "a")
interval(1, 2, c("closed", "open"))
interval(1, 2, c("open", "closed"))
interval(1, Inf, c("open", "closed"))
interval(-Inf, Inf, c("open", "closed"))
interval(-Inf, Inf, c("open", "open"))
interval(2, Inf, c("open", "open"))
interval(2, 4, c("open", "open"))
interval(2, 4, c("closed", "open"))
interval(2, 4, c("closed", "open"))
interval(1, 4, c("closed", "open"))
interval(2, 4, c("closed", "open"))
interval(3, 4, c("closed", "open"))
interval(5, 4, c("closed", "open"))
interval(2, 4, c("closed", "open"))
for (i in 2) print(2)
interval(2, 4, c("closed", "close"))
interval(2, 4, c("closed", "closed"))
interval(2, 4, c("closed", "open"))
interval(2, 4, c("closed", "opened"))
setdiff(c("close", "opened"))
setdiff(c("close", "opened"), c("open", "close")
)
setdiff(c("close", "opened"), c("open", "close"))
interval(2, 4, c("closed", "opened"))
interval(2, 4, c("closed", "opened"))
interval(2, 4, c("closed", "opened"))
interval(2, 4, c("closed", "open"))
interval(2, 4, c("closed", "open"))
interval(2, 4, c("closed", "open"))
interval(2, 4)
interval(2, 4)
interval(2, 4)
interval(2, 4, c("closed", "open"))
interval(c(2, 3), c(4, 4))
interval(c(2, 3), c(4, 4, 5))
interval(c(2, 3, 2), c(4, 4, 5))
interval(c(2, 3, 4), c(4, 4, 5))
seq_along(c(2, 3))
seq_along(c(2, 3))
interval(c(2, 3, 4), c(4, 4, 5))
interval(c(2, 3, 4), c(4, 4, 5), type="closed")
interval(c(2, 3, 4), c(4, 4, 5), type="closed")
!FALSE
c(TRUE, FALSE) && c(FALSE, TRUE)
c(TRUE, FALSE) & c(FALSE, TRUE)
interval(c(2, 3, 4), c(4, 4, 5), type="closed")
belongs(3, interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(3, interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(c(2, 3), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
rm(length)
length(ll)
ll
belongs(c(2, 3), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
interval(c(2, 3, 4), c(4, 4, 5)
interval(c(2, 3, 4), c(4, 4, 5)
interval(c(2, 3, 4), c(4, 4, 5)
belongs(c(2, 3), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(c(2, 3), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(c(2, 3), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(c(2, 3, 2), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(interval(c(2, 3, 4), c(4, 4, 5), type="closed"), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(interval(c(2, 3, 4), c(4, 4, 5), type="closed"), interval(c(2, 3, 4), c(4, 4, 5), type="open"))
belongs(interval(c(2, 3, 4), c(4, 4, 5), type="open"), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(interval(c(1, 2), c(2, 3), type="open"), interval(c(2, 3, 4), c(4, 4, 5), type="closed"))
belongs(interval(c(1, 2), c(2, 3), type="open"), interval(c(2, 3), c(4, 4), type="closed"))
interval(c(1, 2), c(2, 3), type="open")
interval(c(1, 2), c(2, 3), type="open")
interval(c(1, 2), c(2, 3))
interval(c(1, 2), c(2, 3))
interval(c(1, 2), c(2, 3))
interval(c(1, 2), c(2, 3))
belongs(interval(c(1, 2), c(2, 3), type="open"), interval(c(2, 3), c(4, 4), type="closed"))
belongs(interval(c(1, 2), c(2, 3)), interval(c(2, 3), c(4, 4))
)
simplespc
c(1, 2) %o% c(-1, 1)
new("xbarchart", data=c(5, 5, 5, 5, 5))
new("simplespc", data=c(5, 5, 5, 5, 5))
new("simplespc", data=c(5, 5, 5, 5, 5))
xbarchartnew("simplespc", data=c(5, 5, 5, 5, 5))
xbarchart(new("simplespc", data=c(5, 5, 5, 5, 5))
)
xbarchart(new("simplespc", data=c(5, 5, 5, 5, 5)))
library(qcc)
install.packages("qcc")
qcc::stats.p
qcc::limits.p
qcc::limits.np
qcc::limits.xbar
class(mean)
mu + sigma
mu + 2*sigma
zoneB
rep
showMethods("rep")
getGeneric(repeat)
getGeneric("repeat")
repeat
rep
rep
zoneA
rep(zoneA, 3)
rep(zoneA, 2)
rule1.qcc
rule1.qcc()
mu
zone0
zone1
zoneA
c(1, 0, 1)
c(1, 0, 1) > c(0, 2, 1)
c(1, 0, 1) > c(0, 2, 0)
c(1, 0, 1) > c(0, 2, 0)
mu
x
sigma
dir()
debug(sourceCpp)
context$depends
file
debug(.getSourceCppDependencies)
Q
runner
x
ll
runner(x, 3, 4, ll)
ll
runner(x, 3, 4, ll)
runner(x, 3, 4, ll)
runner(x, 3, 4, ll)
runner(x, 3, 9, ll)
runner(x, 3, 1, ll)
runner(x, 3, 0, ll)
runner(x, 3, 1, ll)
runner(x, 2, 1, ll)
runner(x, 1, 1, ll)
runner(x, 0, 1, ll)
runner(x, 3, 0, ll)
runner(x, 3, 0, ll)
n
Q
q()
new("xbar")
setClass
SpcChart
build
new("xbar", data=rep(10, 10), conf=2)
new("xbar", data=rep(10, 10), conf=2)
new("xbar", data=rep(10, 10), conf=2)
new("SpcChart", data=rep(10, 10), conf=2)
new("xbar", data=rep(10, 10), conf=2)
?setClass
q
??refMethods
new("xbar")
?setClass
??initalize
new("xbar")
new("xbar", data=2)
new("xbar", data=2, conf=)
new("xbar", data=2, conf=4)
new("xbar", data=2, conf=4)
q()
new("xbar", data=2, conf=4)
out <- new("xbar", data=2, conf=4)
build(out)
build(out)
build(out, 3)
build(out, 3)
build(out, 3)
build(out, 3)
interval
out <- new("xbar", data=2, conf=4)
out <- new("xbar", data=2)
out <- new("xbar", data=matrix(2))
out <- new("else", data=matrix(2))
out <- new("else", data="chara")
out
interval
interval
out <- new("xbar", data=matrix(2))
out <- new("xbar", data=(2))
out <- new("xbar", data=stats)
out
build(out)
interval
interval
build(out)
build(out, 1)
out
build(out, 1)
mu
build(out, 1)
build(out, 1)
build(out, 2)
build(out, 3)
runner(build(out, 3))
runner(build(out, 3))
res <- build(out, 3)
runner(build(out, 3), 2, 3, res@limits)
res@limits
res
res$limits
runner(build(out, 3), 2, 3, res$limits)
runner(res, 2, 3, res@limits)
runner(res, 2, 3, res$limits)
library(qcc)
stats.p
build
build(out, 3)
rule1(build(out, 3))
out <- build(out, 3)
out
q()
q()
q()
new("xbar", data=stats)
R> out <- build(out, 3)
out <- build(out, 3)
new("xbar", data=stats)
build(new("xbar", data=stats))
build
build(stats)
build(new("xbar", data=stats))
build(new("xbar", data=stats))
build(new("xbar", data=stats))
new("xbar", data=stats)
debug(build)
build(new("xbar", data=stats))
debug(build)
build(new("xbar", data=stats))
build.xbar
build
debug(xbar)
Q
debug(xbar)
debug(build.xbar)
build
object <- new("xbar", data=stats)
XoneA
ZoneA
zoneA
q()
